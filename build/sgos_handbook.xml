<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Subgraph OS Handbook</title>
  </articleinfo>
<sect1 id="everyday-usage">
  <title>Everyday usage</title>
  <para>
    Subgraph OS comes with a number of applications that may already be
    familiar. We have also added newer alternatives that may be less
    familiar. This chapter shows you how to use these applications to
    perform everyday tasks.
  </para>
  <para>
    Subgraph OS is also unique because the applications we have included
    are run inside of a security sandbox. We call this sandbox
    <emphasis role="strong">Oz</emphasis>.
    <emphasis role="strong">Oz</emphasis> helps protect the operating
    system and your personal files in case an application is compromised
    by a security vulnerability.
  </para>
  <para>
    Each application described in this chapter runs inside an
    <emphasis role="strong">Oz</emphasis> sandbox. This means that they
    can only access the files and directories that they need to. Each of
    the applications is isolated from each other. They are also isolated
    from the system itself. Because the applications are isolated, they
    cannot access common directories such as <literal>Pictures</literal>
    or <literal>Downloads</literal> in the usual way. This chapter shows
    you how to manage your files in
    <emphasis role="strong">Oz</emphasis>, with some examples for each
    application.
  </para>
  <sect2 id="browsing-the-web-with-tor-browser">
    <title>Browsing the Web with Tor Browser</title>
    <para>
      Tor Browser is the default web browser of Subgraph OS. It has a
      number of security and privacy advantages over other browsers.
    </para>
    <para>
      The security and privacy features include:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Anti-fingerprinting countermeasures to prevent websites from
          identifying individual users by their browser fingerprint
        </para>
      </listitem>
      <listitem>
        <para>
          A security slider that lets users disable browser features
          that may pose security and privacy risks
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The Tor Browser runs inside a security sandbox, managed by
      Subgraph <emphasis role="strong">Oz</emphasis>. Web browsers
      represent some of the most complex software available. With
      complexity comes increased risk to security and privacy. This is
      what we call the <literal>attack surface</literal> of an
      application. Tor Browser is no different than other browsers in
      that it has a lot of attack surface. A successful compromise of
      Tor Browser could let an attacker gain access to things such as
      SSH keys, GPG encryption keys, personal files, email, etc. Our
      security sandbox technology helps to mitigate these risks.
    </para>
    <sect3 id="configuring-the-tor-browser-security-slider">
      <title>Configuring the Tor Browser security slider</title>
      <para>
        The Tor Browser includes a <literal>security slider</literal>
        that lets users choose the security and privacy features they
        want to enable. If they enable all of the security and privacy
        settings, some websites may be slower or may not work as
        expected. However, the security slider lets them instantly lower
        the settings if they need a particular website to work better.
      </para>
      <para>
        We recommend setting the security slider to Medium-High or High.
        For websites you trust, you can lower the settings to make the
        website perform better.
      </para>
      <para>
        We advise against lowering the security slider for any websites
        that are not accessed over HTTPS. HTTPS helps to make sure that
        the traffic between the Tor Browser and the website has not been
        tampered with. This is what we refer to as the 'integrity'
        security property. If you cannot verify the integrity of the
        traffic originating from a website by using HTTPS, it may be
        dangerous to visit the website using lowered security and
        privacy settings.
      </para>
    </sect3>
    <sect3 id="downloading-and-saving-files-in-the-tor-browser">
      <title>Downloading and saving files in the Tor Browser</title>
      <para>
        The Tor Browser runs inside of
        <emphasis role="strong">Oz</emphasis>, our application sandbox.
        When files are downloaded by a sandboxed application such as the
        Tor Browser, they are saved within the sandbox. When you close
        the Tor Browser, <emphasis role="strong">Oz</emphasis> will
        cleanup the sandbox, causing files saved in the sandbox to be
        destroyed.
      </para>
      <para>
        To allow the Tor Browser to download that can persist after the
        application is closed, <emphasis role="strong">Oz</emphasis>
        makes a special exception. This special exception is a
        <literal>shared directory</literal> where files can be saved and
        retrieved later, without being destroyed when Tor Browser is
        closed. <literal>Shared directory</literal>, in this case, means
        a directory that is shared inside and outside of the
        <emphasis role="strong">Oz</emphasis> sandbox.
        <emphasis role="strong">Oz</emphasis> sets up the the following
        shared directory for saving downloaded files:
      </para>
      <programlisting>
~/Downloads/TorBrowser
</programlisting>
      <para>
        The shared directory name may be localized depending on the
        language settings on your computer. In the case of French, the
        shared directory would be:
      </para>
      <programlisting>
~/Téléchargements/TorBrowser
</programlisting>
      <para>
        Files downloaded to the shared directory will persist after
        closing the Tor Browser.
      </para>
    </sect3>
    <sect3 id="uploading-files-in-the-tor-browser">
      <title>Uploading files in the Tor Browser</title>
      <para>
        When the Tor Browser starts, the
        <emphasis role="strong">Oz</emphasis> sandbox limits its access
        to files and directories on the computer. For example, a photo
        from the <literal>Pictures</literal> directory will not be
        visible in the sandbox by default. If you want to upload a photo
        from this directory, you must use the <emphasis>Oz
        menu</emphasis> to add it to the Tor Browser sandbox. The
        <emphasis role="strong">Oz</emphasis> menu is denoted by the
        little zebra icon at the top-right corner of the screen.
      </para>
      <blockquote>
        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../images/en-US/oz_menu_zebra.png" id="id" role="class" width="60px" depth="60px" />
            </imageobject>
          </inlinemediaobject> The following actions may be performed
          using the <emphasis>Oz menu</emphasis>:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Add files to sandbox
            </para>
          </listitem>
          <listitem>
            <para>
              Open terminal in sandbox
            </para>
          </listitem>
          <listitem>
            <para>
              Shutdown sandbox
            </para>
          </listitem>
        </itemizedlist>
      </blockquote>
      <para>
      </para>
      <para>
        Click on the little zebra and then click
        <literal>Add file...</literal>.
      </para>
      <figure>
        <title>Oz menu - Add file</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/oz_menu_addfiles_menu.png" />
          </imageobject>
          <textobject><phrase>Oz menu - Add file</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        You may add more than one file at a time. You may also choose to
        make these files <literal>read-only</literal>, meaning that they
        can only be read and not written to while in the sandbox.
      </para>
      <figure>
        <title>Oz menu - Select files or directories</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/oz_menu_addfiles_prompt.png" />
          </imageobject>
          <textobject><phrase>Oz menu - Select files or
          directories</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
      </para>
      <para>
        Once the file(s) you want to upload are added to the Tor Browser
        sandbox, you may proceed to upload them normally.
      </para>
    </sect3>
  </sect2>
  <sect2 id="viewing-pdfs">
    <title>Viewing PDFs</title>
    <para>
      PDFs present security and privacy risks to users. Subgraph OS
      sandboxes PDFs in a safe environment, minimizing those risks.
    </para>
    <para>
      PDFs are affected by the following security and privacy risks:
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          PDF readers have security vulnerabilities that can be
          exploited by opening a malicious PDF
        </para>
      </listitem>
      <listitem>
        <para>
          PDFs may make outgoing connections to the Internet,
          compromising the user's privacy either by sending personally
          identifiable information or network traffic that can be
          correlated with the user's other activities
        </para>
      </listitem>
    </orderedlist>
    <para>
      To address the first problem, the security hardening in Subgraph
      OS makes it much more difficult to exploit security
      vulnerabilities in the PDF reader
      (<emphasis role="strong">Evince</emphasis>).
    </para>
    <para>
      If a malicious PDF bypasses the security hardening in Subgraph OS,
      it compromises the PDF reader. However, because
      <emphasis role="strong">Evince</emphasis> runs inside of a
      sandbox, this limits what an attacker can do. The sandbox in
      Subgraph OS is called <emphasis role="strong">Oz</emphasis>.
    </para>
    <para>
      The sandbox prevents <emphasis role="strong">Evince</emphasis>
      from accessing sensitive files on the computer, such as your
      encryption keys, email, personal documents, etc.
      <emphasis role="strong">Evince</emphasis> only requires access to
      the PDF(s) it is reading and some other files it needs to operate
      normally.
    </para>
    <para>
      <emphasis role="strong">Oz</emphasis> also prevents
      <emphasis role="strong">Evince</emphasis> from connecting to the
      Internet. This can prevent malicious code from communicating with
      the outside world. Privacy is also preserved since
      <emphasis role="strong">Evince</emphasis> cannot send data that
      can <emphasis>fingerprint</emphasis> the user.
    </para>
    <para>
      Lastly, the sandbox limits other types of actions through a Linux
      feature called <emphasis>seccomp</emphasis>.
    </para>
    <blockquote>
      <para>
        <emphasis>What is a system call?</emphasis>
      </para>
      <para>
        System calls provide a way for applications, which run in
        <emphasis>user-space</emphasis>, to ask the kernel (running in
        <emphasis>kernel-space</emphasis>) to do things such as read and
        write files, communicate over the network, etc.
      </para>
      <para>
        When a <emphasis>user-space</emphasis> application makes a
        system call to do something such as open a file, the kernel must
        perform a number of low-level actions. The kernel may be
        responsible for the file system implementation, authorizing the
        application to access the file, reading the file contents from
        the hard-drive, etc. The kernel must run with <emphasis>elevated
        privileges</emphasis> in relation to the application to perform
        these low-level actions. System calls let applications cross the
        boundary between <emphasis>user-space</emphasis> and
        <emphasis>kernel-space</emphasis> without requiring the
        application to run with kernel-level privileges.
      </para>
      <para>
        System calls are critical to security because they provide an
        interface for lower-privileged applications to send input to the
        kernel.
      </para>
      <para>
        See the Appendix for a complete list of system calls in Subgraph
        OS.
      </para>
    </blockquote>
    <para>
      Sandboxed applications in Subgraph OS include a set of policies
      called a <emphasis>seccomp whitelist</emphasis>. If an attacker
      compromises an application, this security feature can prevent them
      from gaining elevated privileges on your computer.
    </para>
    <blockquote>
      <para>
        <emphasis>What is seccomp?</emphasis>
      </para>
      <para>
        <emphasis>Seccomp</emphasis> is a security feature of Linux that
        can restrict access to system calls. If an application tries to
        run one of the system calls restricted by
        <emphasis>seccomp</emphasis>, it will be killed instead of
        allowing the system call to run. This can prevent privilege
        escalation in case malicious code tries to exploit kernel
        vulnerabilities through system calls. System calls are often
        used as a <emphasis>payload</emphasis> in malicious code to do
        some things as read files or open network connections.
        <emphasis>Seccomp</emphasis> can also prevent
        <emphasis>payloads</emphasis> from running if they use system
        calls are that blocked by the policy.
      </para>
      <para>
        <emphasis>What is a seccomp whitelist?</emphasis>
      </para>
      <para>
        A <emphasis>seccomp whitelist</emphasis> is a list of allowed
        system calls. If the application tries to call any system call
        <emphasis>not</emphasis> on this list, it is killed by
        <emphasis>seccomp</emphasis>.
      </para>
      <para>
        <emphasis>What is a seccomp blacklist?</emphasis>
      </para>
      <para>
        A <emphasis>seccomp blacklist</emphasis> is a list of forbidden
        system calls. If the application tries to call any system call
        <emphasis>on</emphasis> this list, it will be killed by
        <emphasis>seccomp</emphasis>. This is in contract to the
        whitelist, which blocks the calls <emphasis>not</emphasis> on
        the list.
      </para>
      <para>
        The <emphasis role="strong">Oz</emphasis> sandbox in Subgraph OS
        supports both <emphasis>seccomp whitelists</emphasis> and
        <emphasis>seccomp blacklists</emphasis>.
      </para>
    </blockquote>
    <sect3 id="opening-pdfs-with-evince-in-the-file-explorer">
      <title>Opening PDFs with Evince in the file explorer</title>
      <para>
        Clicking on a PDF in the file explorer will automatically open
        the PDF using <emphasis role="strong">Evince</emphasis> in the
        <emphasis role="strong">Oz</emphasis> sandbox.
      </para>
    </sect3>
    <sect3 id="adding-pdfs-to-evince-from-the-oz-menu">
      <title>Adding PDFs to Evince from the Oz menu</title>
      <para>
        If the PDF reader is already open, the PDF can be added to the
        sandbox by clicking on <emphasis>Add file...</emphasis> option
        of the <emphasis>Oz menu</emphasis> for
        <emphasis role="strong">Evince</emphasis>.
      </para>
      <figure>
        <title>Oz menu - Add file</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Oz_menu_addfiles_pdf.png" />
          </imageobject>
          <textobject><phrase>Oz menu - Add file</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        You may add multiple files. You can also make these files
        <emphasis>read-only</emphasis>, meaning that they cannot be
        modified in the sandbox.
      </para>
      <figure>
        <title>Oz menu - Select files or directories</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Oz_menu_addfiles_pdf_prompt.png" />
          </imageobject>
          <textobject><phrase>Oz menu - Select files or
          directories</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
      </para>
    </sect3>
    <sect3 id="opening-pdfs-from-the-command-line-terminal">
      <title>Opening PDFs from the command-line terminal</title>
      <para>
        PDFs may also be opened from the terminal.
      </para>
      <para>
        For example, to open this handbook using
        <emphasis role="strong">Evince</emphasis> in the terminal, run
        the following command:
      </para>
      <programlisting language="bash">
$ evince sgos_handbook.pdf
</programlisting>
      <para>
        After running the command, you will see the following message:
      </para>
      <programlisting>
ok received
</programlisting>
      <para>
        This message indicates that
        <emphasis role="strong">Oz</emphasis> has received the request
        to launch <emphasis>Evince</emphasis>.
      </para>
      <para>
        You may be surprised that opening the PDF from the terminal also
        opens it in the sandbox. This is because
        <emphasis role="strong">Oz</emphasis> re-routes the commands so
        that they run in the sandbox. For any application that runs in
        <emphasis role="strong">Oz</emphasis>, you may launch it from
        the desktop <emphasis>or</emphasis> the command-line terminal.
      </para>
    </sect3>
  </sect2>
  <sect2 id="chatting-with-coyim">
    <title>Chatting with CoyIM</title>
    <para>
      <emphasis role="strong">CoyIM</emphasis> is one of the instant
      messaging clients in Subgraph OS.
      <emphasis role="strong">CoyIM</emphasis> supports the
      <emphasis>Jabber/XMPP</emphasis> instant messaging protocol. All
      chats are end-to-end encrypted using <emphasis>OTR</emphasis>
      (Off-the-Record) Messaging.
    </para>
    <para>
      <emphasis role="strong">CoyIM</emphasis> is developed by the
      <emphasis>ThoughtWorks STRIKE</emphasis> team as a more secure
      alternative to chat software such as
      <emphasis role="strong">Pidgin</emphasis> and
      <emphasis role="strong">Adium</emphasis>.
    </para>
    <para>
      More information about <emphasis role="strong">CoyIM</emphasis>
      can be found here:
    </para>
    <para>
      <ulink url="https://coy.im/">https://coy.im/</ulink>
    </para>
    <sect3 id="adding-an-xmpp-account-to-coyim">
      <title>Adding an XMPP account to CoyIM</title>
      <para>
        When <emphasis role="strong">CoyIM</emphasis> opens for the
        first time, it asks you if you want to encrypt your
        configuration file. We recommend that you encrypt your
        configuration.
      </para>
      <figure>
        <title>CoyIM - Encrypt configuration file</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/CoyIM_encrypt_config.png" />
          </imageobject>
          <textobject><phrase>CoyIM - Encrypt configuration
          file</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        If you have decided to encrypt your configuration file, you will
        be prompted to configure the master password that will be used
        to encrypt your configuration file. You will need to re-enter
        this password each time you use
        <emphasis role="strong">CoyIM</emphasis>, so choose something
        strong but memorable!
      </para>
      <figure>
        <title>CoyIM - Configure master password</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/CoyIM_configure_master_password.png" />
          </imageobject>
          <textobject><phrase>CoyIM - Configure master
          password</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        To begin using <emphasis role="strong">CoyIM</emphasis>, you
        must first add an existing account from an
        <emphasis>XMPP</emphasis> network.
      </para>
      <figure>
        <title>CoyIM - Account details: basic configuration</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/CoyIM_account_details_basic.png" />
          </imageobject>
          <textobject><phrase>CoyIM - Account details: basic
          configuration</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        Once you had added your account details, you can connect your
        account. If you have successfully connected to the chat network,
        a <emphasis>green</emphasis> dot will appear to the left of your
        username.
      </para>
      <figure>
        <title>CoyIM - Successful connection</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/CoyIM_connected.png" />
          </imageobject>
          <textobject><phrase>CoyIM - Successful
          connection</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
      </para>
    </sect3>
  </sect2>
  <sect2 id="chatting-over-tor-with-ricochet">
    <title>Chatting over Tor with Ricochet</title>
    <para>
      <emphasis role="strong">Ricochet</emphasis> is an anonymous
      peer-to-peer instant messaging application.
      <emphasis role="strong">Ricochet</emphasis> lets people chat
      directly with each other over Tor. Unlike other chat services, no
      intermediate servers are required. This means that
      <emphasis role="strong">Ricochet</emphasis> does not store your
      contact lists and chat histories on a server somewhere in the
      cloud.
    </para>
    <para>
      <emphasis role="strong">Ricochet</emphasis> is built on top of Tor
      hidden services. Tor hidden services provide anonymity and
      end-to-end encryption. This enables people to have conversations
      that are private and secure.
    </para>
    <blockquote>
      <para>
        <emphasis>What is a Tor hidden service?</emphasis>
      </para>
      <para>
        Tor hidden services provides a means of hosting services on the
        Tor network. Any type of network service may be hosted as a
        hidden service (such as web servers, file shares, and instant
        messaging servers).
      </para>
      <para>
        Instead of using an IP address or domain name, Tor hidden
        services are accessed by their <emphasis>.onion</emphasis>
        address. The <emphasis>.onion</emphasis> address is an
        automatically generated name that is derived from the public key
        of the hidden service.
      </para>
      <para>
        <emphasis>.onion</emphasis> addresses are only accessible over
        Tor. <emphasis role="strong">Tor Browser</emphasis> is one way
        to access <emphasis>.onion</emphasis> addresses. In Subgraph OS,
        any application can access <emphasis>.onion</emphasis> addresses
        because all applications are routed through Tor.
      </para>
      <para>
        Tor hidden services provide privacy and anonymity for both the
        server and the client. Tor hidden services have the following
        benefits over regular network services:
      </para>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            Neither the client nor the server need to know the network
            location (IP address) of each other. Tor routes traffic
            through a series of rendezvous points that hide the client
            IP address from the server. The server's network location
            (IP address) is also hidden from the client, who connects to
            the <emphasis>.onion</emphasis> address of the server.
          </para>
        </listitem>
        <listitem>
          <para>
            All traffic between the client and server is end-to-end
            encrypted. Traffic never leaves the Tor network, meaning
            that it is only decrypted on either end of the transaction.
            When Tor is used to connect to the regular Internet, traffic
            is only encrypted until the <emphasis>exit-node</emphasis>.
            Without using another layer of encryption such as HTTPS,
            exit nodes can observe traffic. Tor hidden services are not
            affected by this limitation.
          </para>
        </listitem>
      </orderedlist>
      <para>
        More information about the hidden services protocol can be found
        here:
      </para>
      <para>
        <ulink url="https://www.torproject.org/docs/hidden-services.html.en">https://www.torproject.org/docs/hidden-services.html.en</ulink>
      </para>
    </blockquote>
    <para>
      In <emphasis role="strong">Ricochet</emphasis>, each user has a
      <emphasis>contact ID</emphasis> that maps to a Tor hidden service
      that is hosted on their computer. The application manages all of
      the plumbing of creating the hidden service on your computer and
      communicating with your contacts via their hidden services.
    </para>
    <para>
      More information about Ricochet can be found on the following
      pages:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <ulink url="https://ricochet.im/">https://ricochet.im/</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="https://github.com/ricochet-im/ricochet/blob/master/doc/design.md">https://github.com/ricochet-im/ricochet/blob/master/doc/design.md</ulink>
        </para>
      </listitem>
    </itemizedlist>
    <sect3 id="chatting-in-ricochet">
      <title>Chatting in Ricochet</title>
      <para>
        <emphasis role="strong">Ricochet</emphasis> is similar to other
        instant messaging clients. The application shows the contacts
        that are online. You can open chat sessions with your contacts
        and switch between those sessions like in any other instant
        messager.
      </para>
      <figure>
        <title>Ricochet - Chatting</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Ricochet_chatting.png" />
          </imageobject>
          <textobject><phrase>Ricochet - Chatting</phrase></textobject>
        </mediaobject>
      </figure>
    </sect3>
    <sect3 id="adding-a-contact-in-ricochet">
      <title>Adding a contact in Ricochet</title>
      <para>
        If you know the <emphasis>contact ID</emphasis> of another user,
        you can add them as a contact. To add a contact, click the
        <emphasis role="strong">+</emphasis> button in the top-left
        corner of the application window.
      </para>
      <figure>
        <title>Ricochet - Adding a contact</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Ricochet_add_contact.png" />
          </imageobject>
          <textobject><phrase>Ricochet - Adding a
          contact</phrase></textobject>
        </mediaobject>
      </figure>
      <blockquote>
        <para>
          <emphasis role="strong">Ricochet contact options</emphasis>
        </para>
        <para>
          <emphasis>ID</emphasis>: The <emphasis>contact ID</emphasis>
          of the contact you want to add
        </para>
        <para>
          <emphasis>Name</emphasis>: A nickname for the contact you want
          to add
        </para>
        <para>
          <emphasis>Message</emphasis>: The message you want to send
          when adding the contact
        </para>
      </blockquote>
    </sect3>
  </sect2>
  <sect2 id="sharing-files-with-onionshare">
    <title>Sharing files with OnionShare</title>
    <para>
      <emphasis role="strong">OnionShare</emphasis> is a anonymous,
      peer-to-peer file sharing application. It lets people share files
      of any size private and securely.
    </para>
    <para>
      <emphasis role="strong">OnionShare</emphasis> is built on top of
      Tor hidden services. There are a number of security and privacy
      advantages to sharing files over Tor hidden services using
      <emphasis role="strong">OnionShare</emphasis>.
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          Tor hidden service connections are end-to-end encrypted,
          meaning that the file transfer is encrypted at every point
          between the client and server.
        </para>
      </listitem>
      <listitem>
        <para>
          Tor hidden service connections are anonymous. File transfers
          can occur without the either the client or the server knowing
          the IP address of each other. The server is hidden behind an
          <emphasis>.onion</emphasis> address on the Tor network. The
          client is hidden because it connects to the hidden service
          through different rendezvous points.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>OnionShare</emphasis> file shares are designed to be
          short-lived. They can shut down after the file transfer
          occurs, meaning the server stops listening and the
          <emphasis>.onion</emphasis> address disappears from the Tor
          network.
        </para>
      </listitem>
    </orderedlist>
    <para>
      Subgraph OS enhances the security of
      <emphasis role="strong">OnionShare</emphasis> by sandboxing it
      with <emphasis role="strong">Oz</emphasis>. File shares exist in
      their own sandbox, without access to other sensitive files on the
      computer. If <emphasis role="strong">OnionShare</emphasis> is
      affected by a security vulnerability, running it
      <emphasis role="strong">Oz</emphasis> limits the consequences of
      the vulnerability.
    </para>
    <para>
      When a user shares files,
      <emphasis role="strong">OnionShare</emphasis> starts a hidden
      service with its own <emphasis>.onion</emphasis> address. The user
      then sends the <emphasis>.onion</emphasis> address to the people
      they wish to share files with. The <emphasis>.onion</emphasis>
      address should be sent over a <emphasis>secure communication
      channel</emphasis>. This is important to prevent unwanted parties
      from accessing your shared files. Once files are shared, people
      with the <emphasis>.onion address</emphasis> can download the
      files using the <emphasis role="strong">Tor Browser</emphasis>.
    </para>
    <blockquote>
      <para>
        <emphasis>What is a secure communication channel?</emphasis>
      </para>
      <para>
        A communication channel is secure if people can communicate with
        some expectation that their conversation cannot be intercepted
        or tampered with. Ideally, all communications should be
        encrypted along with their metadata. Metadata includes things
        such as the time, date, and frequency of the conversations. It
        can also include the identities and location of the people who
        are communicating. Even without the content of a conversation,
        metadata can reveal a lot about the nature of the communication.
      </para>
      <para>
        Establishing <emphasis>truly</emphasis> secure communications
        channels is difficult. Many communications tools rely on
        third-parties, making them privy to communications metadata.
        This may include the third-party servers themselves or
        intermediary servers that pass on the communications.
        Communications, even encrypted ones, often leak metadata as they
        travel to their final destination.
      </para>
      <para>
        Subgraph OS includes applications to help our users communicate
        over secure channels. These examples are ranked according to the
        amount of metadata they reveal:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Ricochet instant messager (uses Tor hidden services for
            anonymity and end-to-end encryption, no metadata, no
            third-party servers required)
          </para>
        </listitem>
        <listitem>
          <para>
            CoyIM instant messager (uses the XMPP protocol, some
            metadata, requires third-party servers)
          </para>
        </listitem>
        <listitem>
          <para>
            Encrypted email using Icedove/Torbirdy (uses the SMTP
            protocol, lots of metadata, requires third-party servers)
          </para>
        </listitem>
      </itemizedlist>
    </blockquote>
    <para>
      More information about
      <emphasis role="strong">OnionShare</emphasis> is on the following
      website:
    </para>
    <para>
      <ulink url="https://github.com/micahflee/onionshare">https://github.com/micahflee/onionshare</ulink>
    </para>
    <sect3 id="share-via-onionshare">
      <title>Share via OnionShare</title>
      <para>
        <emphasis role="strong">OnionShare</emphasis> is integrated into
        the file explorer of Subgraph OS. To share a file,
        <emphasis>right-click</emphasis> on the file and select
        <emphasis>Share via OnionShare</emphasis>.
      </para>
      <figure>
        <title>OnionShare - Share via OnionShare</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/OnionShare_select_file.png" />
          </imageobject>
          <textobject><phrase>OnionShare - Share via
          OnionShare</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        Selecting <emphasis>Share via OnionShare</emphasis> will start
        <emphasis role="strong">OnionShare</emphasis> and open the
        <emphasis role="strong">onionshare-gui</emphasis>. It may take a
        few seconds for OnionShare to create the hidden service. The
        status indicator will turn <emphasis>green</emphasis> when it is
        ready.
      </para>
      <figure>
        <title>OnionShare - onionshare-gui</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/OnionShare_onionshare-gui.png" />
          </imageobject>
          <textobject><phrase>OnionShare -
          onionshare-gui</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        <emphasis role="strong">onionshare-gui</emphasis> includes the
        following options to manage shared files:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Add Files
          </para>
        </listitem>
        <listitem>
          <para>
            Add Folder
          </para>
        </listitem>
        <listitem>
          <para>
            Delete (Files and Folders)
          </para>
        </listitem>
        <listitem>
          <para>
            Stop Sharing (all files and folders, this closes
            <emphasis role="strong">OnionShare</emphasis>)
          </para>
        </listitem>
      </itemizedlist>
      <para>
        OnionShare runs inside of the
        <emphasis role="strong">Oz</emphasis> sandbox. To add files and
        folders after OnionShare has started, they must be added through
        the <emphasis role="strong">Oz</emphasis> menu at the top right
        corner of the desktop. See the section on <emphasis>Viewing
        PDFs</emphasis> for further information on adding files and
        folders to an application in the
        <emphasis role="strong">Oz</emphasis> sandbox.
      </para>
      <para>
        The URL for the hidden service (the <emphasis>.onion</emphasis>
        address) is provided along with a button to <emphasis>Copy
        URL</emphasis> to the clipboard. This URL should be sent over a
        <emphasis>secure communication channel</emphasis> to the people
        you want to share files with.
      </para>
      <para>
        The <emphasis>Stop sharing automatically</emphasis> checkbox
        determines whether <emphasis role="strong">OnionShare</emphasis>
        will close automatically after the file is downloaded by a user.
        Un-check this option if you are sharing files with multiple
        users.
      </para>
    </sect3>
    <sect3 id="download-files-from-onionshare">
      <title>Download files from OnionShare</title>
      <para>
        <emphasis role="strong">OnionShare</emphasis> runs as a Tor
        hidden service. To download files over
        <emphasis role="strong">OnionShare</emphasis>, you can use the
        <emphasis role="strong">Tor Browser</emphasis>. Paste the
        <emphasis>.onion</emphasis> address for the file share into the
        address bar of <emphasis role="strong">Tor Browser</emphasis>.
        This will open the web interface for
        <emphasis role="strong">OnionShare</emphasis>.
      </para>
      <figure>
        <title>OnionShare - web interface in Tor Browser</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/OnionShare_TorBrowser.png" />
          </imageobject>
          <textobject><phrase>OnionShare - web interface in Tor
          Browser</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        <emphasis role="strong">NOTE</emphasis>: In this screenshot,
        <emphasis role="strong">OnionShare</emphasis> (the server) and
        <emphasis role="strong">Tor Browser</emphasis> (the client) are
        both running on the same computer. Because the
        <emphasis role="strong">OnionShare</emphasis> server is only
        accessible over a Tor hidden service,
        <emphasis role="strong">Tor Browser</emphasis> connects to the
        file share over Tor. This is the case even if they are running
        on the same computer. Of course, normally the server and the
        client would run on different computers
      </para>
    </sect3>
  </sect2>
  <sect2 id="monitoring-outgoing-connections-with-subgraph-firewall">
    <title>Monitoring outgoing connections with Subgraph
    Firewall</title>
    <para>
      <emphasis role="strong">Subgraph Firewall</emphasis> is an
      <emphasis>application firewall</emphasis> that is included in
      Subgraph OS. While most firewalls are designed to handle incoming
      network communications, an <emphasis>application
      firewall</emphasis> can handle outgoing network communications.
      <emphasis role="strong">Subgraph Firewall</emphasis> can apply
      policies to outgoing connections on a per-application basis.
    </para>
    <para>
      <emphasis>Application firewalls</emphasis> are useful for
      monitoring unexpected connections from applications. For example,
      some applications may <emphasis>phone home</emphasis> to the
      vendor's website. Often this activity is legitimate
      (non-malicious) but it still may violate the user's privacy or
      expectations of how the software operates. Subgraph Firewall gives
      users the choice to allow or deny these connections.
    </para>
    <para>
      Malicious code may also <emphasis>phone home</emphasis> to a
      website or server that is operated by the hacker or malicious code
      author. Subgraph Firewall can also alert the user of these
      connections so that they can be denied.
    </para>
    <para>
      <emphasis>Application firewalls</emphasis> cannot prevent all
      malicious code from connecting to the Internet. Sophisticated
      malicious code can subvert the <emphasis>allowed</emphasis>
      connections to bypass the firewall. However, the firewall may
      alert the user of connection attempts by less sophisticated
      malicious code.
    </para>
    <para>
      Our <emphasis>application firewall</emphasis> makes Subgraph OS
      unique. It is not found in other Linux distributions. Normally,
      applications will make outgoing network connections without the
      knowledge or consent of the user. Subgraph OS helps mitigate these
      security and privacy risks by making users aware and giving them
      the power to decide how applications connect to the Internet.
    </para>
    <sect3 id="allowing-or-denying-connections-in-subgraph-firewall">
      <title>Allowing or denying connections in Subgraph
      Firewall</title>
      <para>
        When Subgraph Firewall sees a connection it does not have a
        policy for, it prompts the user to <emphasis>allow</emphasis> or
        <emphasis>deny</emphasis> the connection. The prompt includes
        options to define the duration of the policy and the scope. By
        scope, we mean apply the policy for the application to a
        specific destination or to any connection made by the
        application.
      </para>
      <para>
      </para>
      <blockquote>
        <para>
          While developing Subgraph Firewall, we noticed some unusual
          behavior from <emphasis role="strong">Gnome
          Calculator</emphasis>. We didn't expect that a calculator
          would need to connect to the Internet and so we were surprised
          to see a prompt from <emphasis role="strong">Subgraph
          Firewall</emphasis>. <emphasis role="strong">Gnome
          Calculator</emphasis> connects to various bank websites to
          fetch the exchange rates for currency conversions.
        </para>
        <para>
          This type of unexpected behavior is one of the reasons we
          created <emphasis role="strong">Subgraph Firewall</emphasis>.
          <emphasis role="strong">Gnome Calculator</emphasis> doesn't
          give the user the choice to fetch the exchange rates.
          <emphasis role="strong">Subgraph Firewall</emphasis> puts that
          choice back in the hands of the user.
        </para>
      </blockquote>
      <figure>
        <title>Subgraph Firewall - allow/deny prompt</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Subgraph_Firewall_alert.png" />
          </imageobject>
          <textobject><phrase>Subgraph Firewall - allow/deny
          prompt</phrase></textobject>
        </mediaobject>
      </figure>
      <blockquote>
        <para>
          <emphasis role="strong">Subgraph Firewall Allow/Deny prompt
          options</emphasis>
        </para>
        <para>
          At the top of the prompt is the name of the application making
          the connection as well the destination hostname and port.
        </para>
        <para>
          <emphasis>IP address</emphasis>: The destination IP address
        </para>
        <para>
          <emphasis>Path</emphasis>: The path to the application that is
          making the connection
        </para>
        <para>
          <emphasis>Process ID</emphasis>: The process ID of the
          application that is making the connection
        </para>
        <para>
          <emphasis>User</emphasis>: The user who started the
          application that is making the connection
        </para>
        <para>
          <emphasis>Allow/Deny</emphasis> duration
        </para>
        <para>
          <emphasis>Forever</emphasis>: <emphasis>Allow</emphasis> or
          <emphasis>Deny</emphasis> the connection forever (this can be
          changed afterwards in the Subgraph Firewall settings)
        </para>
        <para>
          <emphasis>Session</emphasis>: <emphasis>Allow</emphasis> or
          <emphasis>Deny</emphasis> the connection until logging out of
          the desktop session
        </para>
        <para>
          <emphasis>Once</emphasis>: <emphasis>Allow</emphasis> or
          <emphasis>Deny</emphasis> the connection once (the prompt will
          re-appear if the application attempts the connection again)
        </para>
        <para>
          <emphasis>Allow/Deny</emphasis> scope
        </para>
        <para>
          <emphasis>Only hostname on port</emphasis>: Allow/Deny the
          connection for this application only for the
          <emphasis>hostname</emphasis> and <emphasis>port</emphasis>
          listed at the top of the firewall prompt
        </para>
        <para>
          <emphasis>Any Connection</emphasis>: Allow/Deny any connection
          made by the application
        </para>
      </blockquote>
    </sect3>
    <sect3 id="configuring-firewall-rules-in-subgraph-firewall">
      <title>Configuring firewall rules in Subgraph Firewall</title>
      <para>
        To configure the firewall rules, select the
        <emphasis role="strong">Firewall -&gt; Firewall
        Settings</emphasis> option from the <emphasis>Gnome User
        Menu</emphasis> at the top right corner of the desktop.
      </para>
      <figure>
        <title>Gnome User Menu - Firewall -&gt; Firewall
        Settings</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Subgraph_Firewall_menu.png" />
          </imageobject>
          <textobject><phrase>Gnome User Menu - Firewall -&gt; Firewall
          Settings</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        This will open the <emphasis role="strong">Firewall
        Settings</emphasis> configuration window.
      </para>
      <figure>
        <title>Subgraph Firewall Settings</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Subgraph_Firewall_settings.png" />
          </imageobject>
          <textobject><phrase>Subgraph Firewall
          Settings</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        The configuration window shows all of the existing rules.
      </para>
      <para>
        Each rule has the following columns:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Application name
          </para>
        </listitem>
        <listitem>
          <para>
            A policy setting of <emphasis>ALLOW</emphasis> or
            <emphasis>DENY</emphasis>
          </para>
        </listitem>
        <listitem>
          <para>
            The scope of the policy
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The last two options are to <emphasis>Edit</emphasis> or
        <emphasis>Delete</emphasis> a firewall rule.
      </para>
      <para>
        If you click the <emphasis>Edit</emphasis> button (the button
        with the wrench), you will be prompted to edit the
        <emphasis>Allow/Deny</emphasis> policy and its scope.
      </para>
      <figure>
        <title>Subgraph Firewall Settings - Edit Rule</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Subgraph_Firewall_edit_rule.png" />
          </imageobject>
          <textobject><phrase>Subgraph Firewall Settings - Edit
          Rule</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        The <emphasis>Options</emphasis> tab of the
        <emphasis role="strong">Firewall Settings</emphasis> window lets
        you configure general options for
        <emphasis role="strong">Subgraph Firewall</emphasis>.
      </para>
      <figure>
        <title>Subgraph Firewall Settings -Options</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/en-US/Subgraph_Firewall_options.png" />
          </imageobject>
          <textobject><phrase>Subgraph Firewall Settings
          -Options</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
      </para>
    </sect3>
  </sect2>
</sect1>
<sect1 id="features-and-advanced-usage">
  <title>Features and advanced usage</title>
  <para>
    This chapter describes the unique features of Subgraph OS. These are
    features that distinguish it from other operating systems. This is
    where you can find more information about the design of Subgraph OS.
  </para>
  <para>
    As an <emphasis>adversary resistant computing</emphasis> platform,
    Subgraph OS is designed to resist threats to security and privacy.
    This chapter includes more information about how our design
    addresses these threats. We also provide links to external sources
    where more in-depth technical information is available.
  </para>
  <para>
    This chapter also provides documentation for some advanced use-cases
    in Subgraph OS. This content is more technical than previous
    chapters in the Subgraph OS Handbook. It contains
    <emphasis>how-tos</emphasis> and reference materials intended for
    users who are comfortable running commands in the terminal and
    editing configuring files.
  </para>
  <sect2 id="sandboxing-applications-with-subgraph-oz">
    <title>Sandboxing applications with Subgraph Oz</title>
    <para>
      Subgraph OS runs desktop applications inside of our security
      sandbox (<emphasis role="strong">Oz</emphasis>). The security
      sandbox is an additional layer of security, above and beyond the
      othersecurity features of Subgraph OS. Subgraph OS is hardened to
      make it very difficult for an attacker to compromise applications.
      However, it is impossible to prevent every vulnerability. If an
      attacker compromises an application,
      <emphasis role="strong">Oz</emphasis> can help to protect the
      computer and the user's sensitive files against further
      compromise.
    </para>
    <para>
      <emphasis role="strong">Oz</emphasis> can provide the following
      protections to sandboxed applications:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Restrict the files that the application has access to
        </para>
      </listitem>
      <listitem>
        <para>
          Restrict network access
        </para>
      </listitem>
      <listitem>
        <para>
          Restrict audio playback
        </para>
      </listitem>
      <listitem>
        <para>
          Restrict the system calls the application can make (using
          <emphasis role="strong">seccomp</emphasis>)
        </para>
      </listitem>
      <listitem>
        <para>
          Restrict malicious interactions between X11 applications
          (using <emphasis role="strong">xpra</emphasis>)
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Each sandboxed application has its own policies to restrict its
      capabilities.
    </para>
    <para>
      The following table shows some of the sandbox policies in Subgraph
      OS:
    </para>
    <informaltable>
      <tgroup cols="4">
        <colspec align="left" />
        <colspec align="right" />
        <colspec align="right" />
        <colspec align="right" />
        <thead>
          <row>
            <entry>
              Application
            </entry>
            <entry>
              Category
            </entry>
            <entry>
              Network?
            </entry>
            <entry>
              Audio?
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              Tor Browser
            </entry>
            <entry>
              Browser
            </entry>
            <entry>
              Proxy port
            </entry>
            <entry>
              Yes
            </entry>
          </row>
          <row>
            <entry>
              Icedove
            </entry>
            <entry>
              Email client
            </entry>
            <entry>
              Proxy port
            </entry>
            <entry>
              No
            </entry>
          </row>
          <row>
            <entry>
              CoyIM
            </entry>
            <entry>
              Instant messager
            </entry>
            <entry>
              Proxy port
            </entry>
            <entry>
              No
            </entry>
          </row>
          <row>
            <entry>
              Ricochet
            </entry>
            <entry>
              Instant messager
            </entry>
            <entry>
              Proxy port
            </entry>
            <entry>
              No
            </entry>
          </row>
          <row>
            <entry>
              Hexchat
            </entry>
            <entry>
              IRC client
            </entry>
            <entry>
              Proxy port
            </entry>
            <entry>
              No
            </entry>
          </row>
          <row>
            <entry>
              OnionShare
            </entry>
            <entry>
              File sharing
            </entry>
            <entry>
              Proxy port
            </entry>
            <entry>
              No
            </entry>
          </row>
          <row>
            <entry>
              VLC
            </entry>
            <entry>
              Video player
            </entry>
            <entry>
              No
            </entry>
            <entry>
              Yes
            </entry>
          </row>
          <row>
            <entry>
              LibreOffice
            </entry>
            <entry>
              Office suite
            </entry>
            <entry>
              No
            </entry>
            <entry>
              No
            </entry>
          </row>
          <row>
            <entry>
              Evince
            </entry>
            <entry>
              PDF reader
            </entry>
            <entry>
              No
            </entry>
            <entry>
              No
            </entry>
          </row>
          <row>
            <entry>
              Eog
            </entry>
            <entry>
              Image Viewer
            </entry>
            <entry>
              No
            </entry>
            <entry>
              No
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      <emphasis role="strong">Oz</emphasis> also sandboxes desktop
      applications from each other. Normally, applications running under
      the X11 display server can interact with each other. This means
      that one application can intercept or inject events into another
      application.
    </para>
    <para>
      Without <emphasis role="strong">Oz</emphasis> or an alternate
      display server, there is no way to securely prevent applications
      from interacting with each other. An attacker could abuse this to
      perform malicious actions such as intercepting the keystrokes from
      another desktop application. To prevent these attacks,
      <emphasis role="strong">Oz</emphasis> sandboxes use
      <emphasis role="strong">xpra</emphasis> to render applications on
      the desktop. <emphasis role="strong">Xpra</emphasis> isolates
      applications by using a separate display server to render each
      application. Since the applications do not share the same display
      server, they cannot interact.
    </para>
    <para>
      For more technical details about
      <emphasis role="strong">Oz</emphasis> and its security features,
      see the following page:
    </para>
    <para>
      <ulink url="https://github.com/subgraph/oz/wiki/Oz-Technical-Details">https://github.com/subgraph/oz/wiki/Oz-Technical-Details</ulink>
    </para>
    <sect3 id="enabling-an-oz-profile">
      <title>Enabling an Oz profile</title>
      <para>
        <emphasis role="strong">Oz</emphasis> profiles can be found in
        the following directory:
      </para>
      <programlisting>
/var/lib/oz/cells.d
</programlisting>
      <para>
        <emphasis role="strong">Oz</emphasis> automatically enables
        profiles in this directory. However, if you need to manually
        enable a profile, you can do so by running the
        <emphasis role="strong">oz-setup</emphasis> command to
        <emphasis>install</emphasis> the profile.
      </para>
      <para>
        The following example installs the profile for
        <emphasis role="strong">evince</emphasis>:
      </para>
      <programlisting language="bash">
$ sudo oz-setup install evince
</programlisting>
      <para>
        When the profile is installed,
        <emphasis role="strong">Oz</emphasis> will
        <emphasis>divert</emphasis> the path of the program executable.
        Instead of the program running directly, diverting it lets
        <emphasis role="strong">Oz</emphasis> start the program. So the
        next time it is started, the program will be sandboxed by
        <emphasis role="strong">Oz</emphasis>.
      </para>
    </sect3>
    <sect3 id="disabling-an-oz-profile">
      <title>Disabling an Oz profile</title>
      <para>
        If you want to run a previously sandboxed program outside of the
        sandbox, you must disable its profile. To disable a profile, run
        the <emphasis role="strong">oz-setup</emphasis> command with the
        <emphasis>remove</emphasis> option.
      </para>
      <para>
        The following example removes the profile for
        <emphasis role="strong">evince</emphasis>:
      </para>
      <programlisting language="bash">
$ sudo oz-setup remove evince
</programlisting>
      <para>
        When the profile is removed,
        <emphasis role="strong">Oz</emphasis> will undo the
        <emphasis>divert</emphasis> of the program path. The program
        will not run in the <emphasis role="strong">Oz</emphasis>
        sandbox the next time it is started.
      </para>
    </sect3>
    <sect3 id="viewing-the-status-of-an-oz-profile">
      <title>Viewing the status of an Oz profile</title>
      <para>
        The status of a program can also be viewed with the
        <emphasis role="strong">oz-setup</emphasis> command.
      </para>
      <para>
        The following example shows the status of
        <emphasis role="strong">evince</emphasis>:
      </para>
      <programlisting language="bash">
$ sudo oz-setup status /usr/bin/evince
</programlisting>
      <para>
        The command prints the following when
        <emphasis role="strong">evince</emphasis> profile is installed:
      </para>
      <programlisting>
Package divert is installed for:     /usr/bin/evince
Package divert is installed for:     /usr/bin/evince-thumbnailer
Package divert is installed for:     /usr/bin/evince-previewer
</programlisting>
      <para>
        When the <emphasis role="strong">evince</emphasis> profile is
        not installed, the command prints the following:
      </para>
      <programlisting>
Package divert is not installed for: /usr/bin/evince
Package divert is not installed for: /usr/bin/evince-thumbnailer
Package divert is not installed for: /usr/bin/evince-previewer
</programlisting>
    </sect3>
    <sect3 id="creating-an-oz-profile">
      <title>Creating an Oz profile</title>
      <para>
        In this section, we will walk through some of the options in a
        basic profile.
      </para>
      <para>
        <emphasis role="strong">Oz</emphasis> profiles are written in
        JSON.
      </para>
      <para>
        The following is the <emphasis role="strong">Oz</emphasis>
        profile for the <emphasis role="strong">eog</emphasis> image
        viewer:
      </para>
      <programlisting language="javascript">
{
 &quot;name&quot;: &quot;eog&quot;
 , &quot;path&quot;: &quot;/usr/bin/eog&quot;
 , &quot;allow_files&quot;: true
 , &quot;xserver&quot;: {
         &quot;enabled&quot;: true
         , &quot;enable_tray&quot;: false
         , &quot;tray_icon&quot;:&quot;/usr/share/icons/hicolor/scalable/apps/eog.svg&quot;
 }
 , &quot;networking&quot;:{
         &quot;type&quot;:&quot;empty&quot;
 }
 , &quot;whitelist&quot;: [
         {&quot;path&quot;:&quot;/var/lib/oz/cells.d/eog-whitelist.seccomp&quot;, &quot;read_only&quot;: true}
 ]
 , &quot;blacklist&quot;: [
 ]
 , &quot;environment&quot;: [
         {&quot;name&quot;:&quot;GTK_THEME&quot;, &quot;value&quot;:&quot;Adwaita:dark&quot;}
         , {&quot;name&quot;:&quot;GTK2_RC_FILES&quot;,
&quot;value&quot;:&quot;/usr/share/themes/Darklooks/gtk-2.0/gtkrc&quot;}
 ]
 , &quot;seccomp&quot;: {
         &quot;mode&quot;:&quot;whitelist&quot;
         , &quot;enforce&quot;: true
         , &quot;whitelist&quot;:&quot;/var/lib/oz/cells.d/eog-whitelist.seccomp&quot;
 }
 }
</programlisting>
      <blockquote>
        <para>
          <emphasis role="strong">Example Oz profile configuration
          options</emphasis>
        </para>
        <para>
          <emphasis>name</emphasis>: The name of the profile
        </para>
        <para>
          <emphasis>path</emphasis>: The path to the program executable
        </para>
        <para>
          <emphasis>allow_files</emphasis>: Allow files to be passed as
          arguments to the program (such as image files for
          <emphasis role="strong">eog</emphasis>)
        </para>
        <para>
          <emphasis>xserver -&gt; enabled</emphasis>: Enable the use of
          the Xserver (<emphasis role="strong">xpra</emphasis>)
        </para>
        <para>
          <emphasis>xserver -&gt; enable_tray</emphasis>: Enable the
          <emphasis role="strong">xpra</emphasis> diagnostic tray
          (defaults to <literal>false</literal>, enabling it requires
          extra software)
        </para>
        <para>
          <emphasis>xserver -&gt; tray_icon</emphasis>: The path to the
          tray icon
        </para>
        <para>
          <emphasis>networking -&gt; type</emphasis>: The networking
          configuration type, <emphasis>empty</emphasis> disables
          networking entirely
        </para>
        <para>
          <emphasis>whitelist -&gt; path</emphasis>: The path of a file
          to add to the sandbox, in this case it is the
          <emphasis>seccomp whitelist</emphasis> for
          <emphasis role="strong">eog</emphasis>
        </para>
        <para>
          <emphasis>whitelist -&gt; path -&gt; read_only</emphasis>:
          Whether or not the allowed file is
          <emphasis>read-only</emphasis>, should be
          <emphasis>true</emphasis> in most cases
        </para>
        <para>
          <emphasis>blacklist</emphasis>: Removes access to a file in
          the sandbox, accepts the <emphasis>path</emphasis> argument
        </para>
        <para>
          <emphasis>environment -&gt; name, value</emphasis>: Adds
          environment variables by name and value to the sandbox
        </para>
        <para>
          <emphasis>seccomp -&gt; mode</emphasis>: Adds a seccomp policy
          (either <emphasis>whitelist</emphasis> or
          <emphasis>blacklist</emphasis>) to the sandbox
        </para>
        <para>
          <emphasis>seccomp -&gt; enforce</emphasis>&quot;: The seccomp
          enforcement mode
        </para>
        <para>
          <emphasis>seccomp -&gt; whitelist</emphasis>: The path to the
          whitelist policy
        </para>
      </blockquote>
      <para>
        <emphasis role="strong">Oz</emphasis> supports a number of
        different profile configurations. More examples for real
        applications are located in the profiles directory:
      </para>
      <programlisting>
/var/lib/oz/cells.d
</programlisting>
      <para>
        Complete documentation for creating
        <emphasis role="strong">Oz</emphasis> profiles can be found
        here:
      </para>
      <para>
        <ulink url="https://github.com/subgraph/oz">https://github.com/subgraph/oz</ulink>
      </para>
    </sect3>
    <sect3 id="securing-system-calls-with-seccomp-in-oz">
      <title>Securing system calls with seccomp in Oz</title>
      <para>
        <emphasis>Seccomp</emphasis> is a feature of the Linux kernel to
        limit exposed system calls. As system calls provide a user
        interface to the kernel, they expose it to attacks. These
        attacks can let an attacker elevate their privileges on the
        computer. The <emphasis role="strong">Oz</emphasis> sandbox uses
        <emphasis>seccomp</emphasis> to protect against this type of
        attack.
      </para>
      <para>
        <emphasis role="strong">Oz</emphasis> supports
        <emphasis>seccomp</emphasis> policies on a per-application
        basis. <emphasis>Seccomp</emphasis> kills applications whenever
        they violate a policy. This protects the computer in cases where
        an attacker tries to exploit a vulnerability in the kernel that
        depends on the blocked system call.
      </para>
      <para>
        Some attacks also use system calls as part of their
        <emphasis>payload</emphasis>. A <emphasis>payload</emphasis> is
        the malicious code that runs as a result of a successful
        exploit. The <emphasis>seccomp</emphasis> policies in
        <emphasis role="strong">Oz</emphasis> can prevent
        <emphasis>payloads</emphasis> from running if they use a blocked
        system call.
      </para>
      <para>
        <emphasis role="strong">Oz</emphasis> supports
        <emphasis role="strong">whitelist</emphasis> or
        <emphasis role="strong">blacklist</emphasis> policies. Whitelist
        policies are <emphasis>default deny</emphasis>. This means that
        only system calls that are explicitly permitted will be allowed.
        All other system calls (those not on the
        <emphasis role="strong">whitelist</emphasis>) cause the
        application to be killed.
      </para>
      <para>
        <emphasis role="strong">Blacklist</emphasis> policies are
        <emphasis>default allow</emphasis>. This means that seccomp
        blocks system calls in the blacklist policy but allows all
        others (those not on the
        <emphasis role="strong">blacklist</emphasis>).
      </para>
      <para>
        <emphasis role="strong">Whitelist</emphasis> policies are
        appropriate when the application is well understood. By well
        understood, we mean that the behavior of the application is
        predictable enough to create a precise profile of allowed system
        calls. This is more secure than a
        <emphasis role="strong">blacklist</emphasis> because known
        behavior of the application is allowed but unknown behavior is
        blocked. The disadvantage of this approach is that the
        <emphasis role="strong">whitelists</emphasis> must be updated
        regularly to reflect the known behavior of the application.
      </para>
      <para>
        <emphasis role="strong">Blacklist</emphasis> policies are
        appropriate for applications that are not as well understood. We
        use them prior to the creation of a
        <emphasis role="strong">whitelist</emphasis> or if there is some
        other reason a <emphasis role="strong">whitelist</emphasis>
        cannot be created.
      </para>
      <para>
        <emphasis role="strong">Oz</emphasis> includes a generic
        <emphasis role="strong">blacklist</emphasis> that will work
        out-of-the-box with many applications. This policy blocks
        unusual or exotic system calls that applications do not normally
        use.
      </para>
      <para>
        The <emphasis role="strong">Oz</emphasis> generic
        <emphasis role="strong">blacklist</emphasis> is located here:
      </para>
      <programlisting>
/var/lib/oz/cells.d/generic-blacklist.seccomp
</programlisting>
      <para>
        In Subgraph OS, we try to create
        <emphasis role="strong">whitelist</emphasis> policies for all of
        our supported applications.
      </para>
      <para>
        See the Appendix for a complete list of system calls in Subgraph
        OS. You can use this reference to look up system call numbers
        when writing or debugging <emphasis>seccomp</emphasis> policies.
      </para>
    </sect3>
    <sect3 id="profiling-applications-with-oz-seccomp-tracer">
      <title>Profiling applications with oz-seccomp-tracer</title>
      <para>
        <emphasis role="strong">Oz</emphasis> includes a tool to help
        with the creation and maintenance of seccomp
        <emphasis role="strong">whitelists</emphasis>. The
        <emphasis role="strong">oz-seccomp-tracer</emphasis> profiles
        applications as they run to determine the system calls that they
        use. This tool will generate a seccomp
        <literal>whitelist</literal> after it exits.
      </para>
      <para>
        To profile Firefox using
        <emphasis role="strong">oz-seccomp-tracer</emphasis>, run the
        following command:
      </para>
      <programlisting language="bash">
$ oz-seccomp-tracer -trace -output firefox-whitelist.seccomp /usr/bin/firefox \ 
2&gt;firefox_syscalls.txt
</programlisting>
      <para>
        You can then use Firefox as you normally would. When you are
        finished, a seccomp <emphasis role="strong">whitelist</emphasis>
        will be saved to
        <emphasis role="strong">firefox-whitelist.seccomp</emphasis>.
        <emphasis role="strong">oz-seccomp-tracer</emphasis> prints all
        of the system calls from the application to
        <emphasis role="strong">stdout</emphasis>. So we also advise you
        to redirect this output to a separate file. We use
        <emphasis role="strong">firefox_syscalls.txt</emphasis> in this
        example. You could also redirect this output to
        <emphasis role="strong">/dev/null</emphasis> if you don't want
        to save it.
      </para>
    </sect3>
    <sect3 id="adding-a-seccomp-policy-to-an-oz-application-profile">
      <title>Adding a seccomp policy to an Oz application
      profile</title>
      <para>
        Once you are satisfied with the
        <emphasis role="strong">whitelist</emphasis>, you can copy it to
        the following directory:
      </para>
      <programlisting>
/var/lib/oz/cells.d
</programlisting>
      <para>
        Using Firefox as an example, the following snippets from
        <emphasis>/var/lib/oz/cells.d/firefox.json</emphasis> show how
        to apply the policy.
      </para>
      <para>
        First, the seccomp policy file must be added to the list of
        files allowed in the sandbox:
      </para>
      <programlisting language="javascript">
&quot;whitelist&quot;: [
        , {&quot;path&quot;:&quot;/var/lib/oz/cells.d/firefox-whitelist.seccomp&quot;, 
                &quot;read_only&quot;: true}
]
</programlisting>
      <para>
        Then the seccomp policy needs to be enabled to run in
        <emphasis>enforce</emphasis> mode:
      </para>
      <programlisting language="javascript">
&quot;seccomp&quot;: {
         &quot;mode&quot;:&quot;whitelist&quot;
         ,
&quot;whitelist&quot;:&quot;/var/lib/oz/cells.d/firefox-whitelist.seccomp&quot;
         , &quot;enforce&quot;: true
}
</programlisting>
      <para>
        Lastly, the <emphasis role="strong">Oz</emphasis> daemon must be
        restarted to load the seccomp policy. You should save your work
        at this point as restarting
        <emphasis role="strong">Oz</emphasis> will close all of the open
        sandboxes. To restart the <emphasis role="strong">Oz</emphasis>
        daemon, run the following command:
      </para>
      <programlisting language="bash">
$ sudo systemctl restart oz-daemon.service 
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="anonymizing-communications-with-tor">
    <title>Anonymizing communications with Tor</title>
    <para>
      <emphasis>Tor</emphasis> is an essential privacy tool that
      provides anonymity to its users. In particular, Tor hides the
      location of its users. By location, we mean your IP address (which
      can also be used to geo-locate your computer).
    </para>
    <para>
      Tor hides your location by relaying your traffic through a random
      series of network connections (called a
      <emphasis>circuit</emphasis>). While your traffic passes through
      the <emphasis>hops</emphasis> in this circuit, the source and
      destination of the traffic are hidden. The traffic eventually
      leaves the <emphasis>circuit</emphasis> through an <emphasis>exit
      node</emphasis>. The <emphasis>exit node</emphasis> relays the
      traffic to its final destination but is also unaware of the
      source. They are called <emphasis>exit nodes</emphasis> because
      they are the point where the traffic leaves the Tor network to
      reach its destination on the regular Internet. <emphasis>Exit
      nodes</emphasis> may observe or tamper with the traffic en-route
      to its destination, unless an additional layer of encryption is
      applied such as <emphasis>TLS</emphasis>.
    </para>
    <para>
      Due to the possibility that some <emphasis>exit nodes</emphasis>
      are malicious, we strongly advise you to use Tor with an
      additional layer of encryption. This means connecting to websites
      over <emphasis>HTTPS</emphasis> only, using TLS with applications
      such as <emphasis role="strong">Icedove</emphasis> or
      <emphasis role="strong">Hexchat</emphasis>, etc.
    </para>
    <para>
      <emphasis role="strong">NOTE</emphasis>: Tor hidden services
      provide a way to send network traffic <emphasis>only</emphasis>
      through the Tor network. This eliminates the risks involved when
      the traffic passes through an <emphasis>exit node</emphasis> to
      the regular Internet. However, this requires that the destination
      service is configured to run as a hidden service. It also adds
      more latency to the network traffic because it must pass through
      more <emphasis>hops</emphasis> to reach the hidden service. Tor
      hidden services are discussed in further detail in other sections
      of this book.
    </para>
    <para>
      More information about Tor can be found here:
    </para>
    <para>
      <ulink url="https://www.torproject.org/about/overview">https://www.torproject.org/about/overview</ulink>
    </para>
    <sect3 id="tor-integration-in-subgraph-os">
      <title>Tor integration in Subgraph OS</title>
      <para>
        Subgraph OS is integrated with the Tor anonymity network. We
        include many applications that are designed to be used with Tor.
        These include:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <emphasis role="strong">Tor Browser</emphasis> for browsing
            the web anonymously and accessing Tor hidden service
            websites
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">OnionShare</emphasis> for sharing
            files anonymously over Tor
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Ricochet</emphasis> for chatting
            anonymously of Tor
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">CoyIM</emphasis> instant messager,
            which supports connecting to the <emphasis>.onion</emphasis>
            addresses for <emphasis>XMPP/Jabber</emphasis> chat servers
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Other parts of Subgraph OS are engineered to integrate with Tor
        seamlessly. The <emphasis role="strong">Metaproxy</emphasis>
        routes non-Tor applications over Tor. Our
        <emphasis role="strong">Oz</emphasis> sandbox also lets
        applications work seamlessly with Tor. We also include a Gnome
        Shell extension that monitors that status of connections to the
        Tor network. Lastly,
        <emphasis role="strong">ROFLCopTor</emphasis> is a filter for
        the Tor control port that enforces security policies on
        applications that run Tor control commands.
      </para>
    </sect3>
  </sect2>
  <sect2 id="routing-applications-through-tor-with-subgraph-metaproxy">
    <title>Routing applications through Tor with Subgraph
    Metaproxy</title>
    <para>
      The <emphasis role="strong">Metaproxy</emphasis> is an important
      part of Subgraph OS. It runs in the background to help
      applications connect through the Tor network. This is done
      transparently, even with applications that are not configured or
      designed to work with Tor.
    </para>
    <para>
      On other operating systems, users must specifically configure
      applications to connect to the Internet through Tor. This normally
      requires the user to configure proxy settings of the application
      to connect through Tor's built-in proxies. Some applications do
      not support or honor proxy settings. To use Tor with these
      applications, users often run them with using a command-line
      helper called <emphasis role="strong">torsocks</emphasis> to
      <emphasis>torify</emphasis> the application. This is a lot of work
      for users.
    </para>
    <para>
      Configuring proxies or <emphasis>torifying</emphasis> applications
      by hand is not an adequate solution for Subgraph OS. Usability and
      maintainability are issues with this approach. In Subgraph OS,
      some applications simply would not work if there is no easy way to
      route them through Tor. This is because Subgraph OS blocks
      outgoing connections that are not routed through Tor. This is to
      prevent accidental privacy leaks. If an application has no way to
      communicate over Tor, it may not be able to access the network at
      all.
    </para>
    <para>
      The <emphasis role="strong">Metaproxy</emphasis> addresses this
      problem by automatically relaying outgoing connections through
      Tor. When we say this is done transparently, we mean the following
      two things:
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          Users do not have to manually <emphasis>torify</emphasis>
          their applications or otherwise configure them to use Tor
        </para>
      </listitem>
      <listitem>
        <para>
          Applications that are already configured to use Tor are
          ignored by the <emphasis role="strong">Metaproxy</emphasis>,
          therefore, it only helps those applications which need it
        </para>
      </listitem>
    </orderedlist>
  </sect2>
  <sect2 id="securing-the-tor-control-port-with-roflcoptor">
    <title>Securing the Tor control port with ROFLCopTor</title>
    <para>
      The Tor service is managed by a control protocol. This lets users
      perform various actions such as querying information about Tor
      connections, starting hidden services, and changing configuration
      options. However, most applications do not need all of these
      features. These extra features may actually introduce security and
      privacy risks if someone gains unauthorized access to the control
      port. To mitigate these risks, Subgraph OS includes a control port
      filter called <emphasis>ROFLCopTor</emphasis>.
    </para>
    <para>
      <emphasis>ROFLCopTor</emphasis> is a proxy server that is placed
      between Tor control clients and the Tor control server port.
      <emphasis>ROFLCopTor</emphasis> handles authentication itself,
      meaning clients do not need to know the authentication credentials
      or run with higher privileges to access to Tor control port. It
      intercepts the incoming commands and outgoing responses.
      <emphasis>ROFLCopTor</emphasis> enforces policies on a
      per-application basis for the traffic between the Tor control
      clients and the server.
    </para>
    <para>
      <emphasis>ROFLCopTor</emphasis> supports policies that are
      bi-directional. This means that a policy can filter both the
      incoming commands and the outgoing responses from the Tor control
      port. Policies can also replace command and response strings.
      Replacements can be used to filter sensitive information from Tor
      control port responses.
    </para>
    <para>
      <emphasis>ROFLCopTor</emphasis> has a number of default policies
      for applications in Subgraph OS that require access to the Tor
      control port. The policies work without modification for most
      use-cases. This section describes how to profile applications to
      create new policies or modify existing ones.
    </para>
    <sect3 id="profiling-applications-with-roflcoptor">
      <title>Profiling applications with ROFLCopTor</title>
      <para>
        <emphasis>ROFLCopTor</emphasis> can profile applications to
        determine the Tor control commands that they run on a regular
        basis. This makes it easier to create or edit policies.
      </para>
      <para>
        Before profiling applications, you should stop the currently
        running version of <emphasis>ROFLCopTor</emphasis>:
      </para>
      <programlisting language="bash">
$ sudo systemctl stop roflcoptor
</programlisting>
      <para>
        To begin profiling, you must start
        <emphasis>ROFLCopTor</emphasis> in <emphasis>watch</emphasis>
        mode:
      </para>
      <programlisting language="bash">
$ sudo -u roflcoptor roflcoptor watch -log_level DEBUG \
-config /etc/roflcoptor/roflcoptor_config.json  
</programlisting>
      <para>
        The log shows some of the commands that applications tried to
        run:
      </para>
      <programlisting>
18:21:53 - DEBU 017 connection received tcp:127.0.0.1:44860 -&gt;
tcp:127.0.0.1:9051
18:21:55 - ERRO 018 filter policy for gnome-shell-torstatus DENY: A-&gt;T: [GETCONF
ORPort]
18:21:55 - ERRO 019 filter policy for gnome-shell-torstatus DENY: A-&gt;T: [GETINFO
events/names]
18:21:55 - ERRO 01a filter policy for gnome-shell-torstatus DENY: A-&gt;T:
[SETEVENTS NOTICE NS NEWDESC NEWCONSENSUS]
18:21:55 - ERRO 01b filter policy for gnome-shell-torstatus DENY: A-&gt;T: [GETINFO
process/user]
18:21:55 - ERRO 01c filter policy for gnome-shell-torstatus DENY: A-&gt;T: [GETINFO
process/pid]
...
</programlisting>
      <para>
        Press <emphasis role="strong">Ctrl-C</emphasis> to stop the
        <emphasis>ROFLCopTor</emphasis> watch process. Make sure to
        restart <emphasis>ROFLCopTor</emphasis> normally after you are
        done profiling. Run the following command to restart
        <emphasis>ROFLCopTor</emphasis>:
      </para>
      <programlisting language="bash">
$ sudo systemctl restart roflcoptor
</programlisting>
    </sect3>
    <sect3 id="editing-roflcoptor-policies">
      <title>Editing ROFLCopTor policies</title>
      <para>
        Once you have a list of commands required by an application, you
        can create or edit a policy.
      </para>
      <para>
        <emphasis>ROFLCopTor</emphasis> policies are written in JSON.
        Policies can be found in the following directory on Subgraph OS:
      </para>
      <programlisting>
/etc/roflcoptor/filters/
</programlisting>
      <para>
        The following is a simple policy for the Tor Status Gnome shell
        extension in Subgraph OS:
      </para>
      <programlisting language="javascript">
{
    &quot;Name&quot;: &quot;gnome-shell-torstatus&quot;,
    &quot;AuthNetAddr&quot; : &quot;tcp&quot;,
    &quot;AuthAddr&quot; : &quot;127.0.0.1:9051&quot;,
    &quot;client-allowed&quot; : [&quot;GETINFO status/bootstrap-phase&quot;, &quot;SIGNAL NEWNYM&quot;],
    &quot;client-allowed-prefixes&quot; : [],
    &quot;client-replacements&quot; : {},
    &quot;client-replacement-prefixes&quot; : {},
    &quot;server-allowed&quot; : [&quot;250 OK&quot;],
    &quot;server-allowed-prefixes&quot; : [&quot;250-status/bootstrap-phase=&quot;],
    &quot;server-replacement-prefixes&quot; : {}
}
</programlisting>
      <blockquote>
        <para>
          <emphasis role="strong">ROFLCopTor policy configuration
          options</emphasis>
        </para>
        <para>
          <emphasis>Name</emphasis>: The name of the application to
          apply the policy to
        </para>
        <para>
          <emphasis>AuthNetAddr</emphasis>: The protocol used by the Tor
          control port
        </para>
        <para>
          <emphasis>AuthAddr</emphasis>: The address of the Tor control
          port
        </para>
        <para>
          <emphasis>client-allowed</emphasis>: The list of commands
          allowed by the client
        </para>
        <para>
          <emphasis>client-allowed-prefixes</emphasis>: A list of
          prefixes for partial allowed client commands (commands where
          the suffix varies)
        </para>
        <para>
          <emphasis>client-replacements</emphasis>: A list of commands
          to replace and their replacement strings
        </para>
        <para>
          <emphasis>client-replacement-prefixes</emphasis>: A list of
          client command prefixes to replace and their replacement
          strings (for commands where the suffix varies)
        </para>
        <para>
          <emphasis>server-allowed</emphasis>: The list of responses
          allowed by the server
        </para>
        <para>
          <emphasis>server-allowed-prefixes</emphasis>: A list of
          prefixes for partial allowed server responses (responds where
          the suffix varies)
        </para>
        <para>
          <emphasis>server-replacement-prefixes</emphasis>: A list of
          server response prefixes to replace and their replacement
          strings (for responses where the suffix varies)
        </para>
      </blockquote>
      <para>
        The most common configuration task is to add new commands and
        responses to the <emphasis>client-allowed</emphasis>,
        <emphasis>client-allowed-prefixes</emphasis>,
        <emphasis>server-allowed</emphasis>, and
        <emphasis>server-allowed-prefixes</emphasis> options.
      </para>
      <para>
        More documentation on configuring and using ROFLCopTor is
        located on the following page:
        <ulink url="https://github.com/subgraph/roflcoptor">https://github.com/subgraph/roflcoptor</ulink>
      </para>
    </sect3>
  </sect2>
  <sect2 id="hardening-the-operating-system-and-applications-with-grsecurity">
    <title>Hardening the operating system and applications with
    Grsecurity</title>
    <para>
      <emphasis role="strong">Grsecurity</emphasis> is a third-party
      security enhancement to the Linux kernel. It is developed and
      maintained by the <emphasis role="strong">Grsecurity</emphasis>
      team. It is implemented as a patch to the upstream Linux kernel.
      Subgraph OS ships with a kernel that is patched with
      <emphasis role="strong">Grsecurity</emphasis>.
    </para>
    <para>
      For more information about
      <emphasis role="strong">Grsecurity</emphasis>, see the following
      page:
    </para>
    <para>
      <ulink url="https://grsecurity.net/">https://grsecurity.net/</ulink>
    </para>
    <sect3 id="configuring-pax-flags-with-paxrat">
      <title>Configuring PaX flags with Paxrat</title>
      <para>
        <emphasis role="strong">Paxrat</emphasis> is a utility in
        Subgraph OS for maintaining the <emphasis>PaX flags</emphasis>
        of applications on the computer.
      </para>
      <blockquote>
        <para>
          <emphasis>What is PaX?</emphasis>
        </para>
        <para>
          <emphasis>PaX</emphasis> is a feature of
          <emphasis>Grsecurity</emphasis> that provides <emphasis>memory
          protection</emphasis>. Many security vulnerabilities in
          applications and the Linux kernel allow attackers to corrupt
          process memory. <emphasis>Memory corruption</emphasis> can be
          exploited to run the attackers <emphasis>payload</emphasis> of
          malicious code.
        </para>
        <para>
          PaX protects the computer from <emphasis>memory
          corruption</emphasis> using a number of novel techniques such
          as:
        </para>
        <orderedlist numeration="arabic" spacing="compact">
          <listitem>
            <para>
              Randomizing the layout of process memory or
              <emphasis>ASLR</emphasis> (Address Space Layout
              Randomization), making it harder for attackers to guess
              where their malicious <emphasis>payload</emphasis> is
              stored in process memory
            </para>
          </listitem>
          <listitem>
            <para>
              Making memory pages <emphasis>non-executable</emphasis>,
              meaning that an attacker's <emphasis>payload</emphasis>
              cannot run if stored in
              <emphasis>non-executable</emphasis> memory
            </para>
          </listitem>
        </orderedlist>
        <para>
          <emphasis>PaX</emphasis> includes other <emphasis>memory
          protection</emphasis> and <emphasis>control flow
          integrity</emphasis> features so that it is more difficult for
          attackers to exploit <emphasis>memory corruption</emphasis>
          vulnerabilities in applications and the kernel.
        </para>
        <para>
          <emphasis>PaX</emphasis> does not prevent all vulnerabilities
          but it complicates attacks. The difference to an attacker is
          that with <emphasis>PaX</emphasis> they may be required to
          exploit multiple vulnerabilities to achieve the same effect as
          a single vulnerability.
        </para>
        <para>
          More information about <emphasis>PaX</emphasis> can be found
          here:
        </para>
        <para>
          <ulink url="https://pax.grsecurity.net/">https://pax.grsecurity.net/</ulink>
        </para>
      </blockquote>
      <para>
        <emphasis>PaX</emphasis> works by killing applications that
        violate its security policies. This
        <emphasis>proactively</emphasis> prevents attacks from
        succeeding. However, as part of their normal functions, some
        applications perform non-malicious actions that violate the
        security policies. <emphasis>PaX flags</emphasis> are exceptions
        to these policies. They let applications run normally without
        being killed by <emphasis>PaX</emphasis> when they perform an
        action that appears to violate policies.
      </para>
      <para>
        Applications such as web browsers need <emphasis>PaX
        flags</emphasis> to be set because they perform actions such as
        <emphasis>JIT</emphasis> (Just in Time compilation). To
        <emphasis>PaX</emphasis>, <emphasis>JIT</emphasis> has the same
        profile as an attack. Applications that use a
        <emphasis>JIT</emphasis> compiler must be flagged as exceptions
        so that they are not killed.
      </para>
      <para>
        <emphasis role="strong">Paxrat</emphasis> keeps track of the
        <emphasis>PaX flags</emphasis> for applications in Subgraph OS.
        It is designed to maintain the <emphasis>PaX</emphasis> flags
        between application updates.
        <emphasis role="strong">Paxrat</emphasis> runs when the system
        updates software, automatically re-applying flags to upgraded
        applications.
      </para>
      <para>
        <emphasis role="strong">Paxrat</emphasis> can only maintain the
        flags it knows about. If a user discovers that
        <emphasis>PaX</emphasis> is killing an application, the
        configuration must be changed to disable some <emphasis>PaX
        flags</emphasis>. Instructions are provided in this guide for
        changing the <emphasis role="strong">Paxrat</emphasis>
        configuration. We also advise users to report the exception to
        us so that we can update the configuration for everybody.
      </para>
      <para>
        <emphasis role="strong">Paxrat</emphasis> configuration files
        are written in JSON. They are stored in the following directory:
      </para>
      <programlisting>
/etc/paxrat
</programlisting>
      <para>
        The following is a snippet of a <emphasis>PaX flag</emphasis>
        configuration for <emphasis role="strong">Tor
        Browser</emphasis>:
      </para>
      <programlisting language="javascript">
&quot;/home/user/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/Browser/firefox&quot;:
{
    &quot;flags&quot;: &quot;m&quot;,
    &quot;nonroot&quot;: true
}
</programlisting>
      <blockquote>
        <para>
          <emphasis role="strong">Paxrat configuration
          options</emphasis>
        </para>
        <para>
          The first line of the configuration (in quotes) is the path to
          the application. In the above example, it is:
          &quot;/home/user/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/Browser/firefox&quot;
        </para>
        <para>
          <emphasis>flags</emphasis>: This a string of letters
          representing the various PaX flags
        </para>
        <para>
          <emphasis>nonroot</emphasis>: This indicates whether the
          application is owned by the <emphasis>root</emphasis> user or
          not, it is <emphasis>false</emphasis> by default but
          <emphasis>true</emphasis> in the example because the
          <emphasis role="strong">Tor Browser</emphasis> application is
          owned by a normal user
        </para>
        <para>
          <emphasis role="strong">NOTE</emphasis>: As a security
          precaution, <emphasis role="strong">Paxrat</emphasis> will not
          apply <emphasis>PaX flags</emphasis> to an application that is
          owned by a <emphasis>nonroot</emphasis> user unless the
          <emphasis>nonroot</emphasis> option is set to
          <emphasis>true</emphasis>.
        </para>
      </blockquote>
      <para>
        There are a number of different <emphasis>PaX flags</emphasis>
        that can be <emphasis>enabled</emphasis> or
        <emphasis>disabled</emphasis>. Most are
        <emphasis>enabled</emphasis> by default and must be
        <emphasis>disabled</emphasis>. <emphasis>Disabled</emphasis>
        flags are represented by a lower-case letter such as
        <emphasis role="strong">m</emphasis>. Upper-case letters such as
        <emphasis role="strong">M</emphasis> represent
        <emphasis>enabled</emphasis> flags.
      </para>
      <blockquote>
        <para>
          <emphasis role="strong">PaX flags</emphasis>
        </para>
        <para>
          <emphasis>P/p</emphasis>: <emphasis>Enable/disable</emphasis>
          PAGEXEC
        </para>
        <para>
          <emphasis>E/e</emphasis>: <emphasis>Enable/disable</emphasis>
          EMUTRAMP
        </para>
        <para>
          <emphasis>M/m</emphasis>: <emphasis>Enable/disable</emphasis>
          MPROTECT
        </para>
        <para>
          <emphasis>R/r</emphasis>: <emphasis>Enable/disable</emphasis>
          RANDMAP
        </para>
        <para>
          <emphasis>X/x</emphasis>: <emphasis>Enable/disable</emphasis>
          RANDEXEC
        </para>
        <para>
          <emphasis>S/x</emphasis>: <emphasis>Enable/disable</emphasis>
          SEGMEXEC
        </para>
        <para>
          A detailed description of these flags can be found on the
          following page:
        </para>
        <para>
          <ulink url="https://en.wikibooks.org/wiki/Grsecurity/Appendix/PaX_Flags">https://en.wikibooks.org/wiki/Grsecurity/Appendix/PaX_Flags</ulink>
        </para>
      </blockquote>
      <para>
        Working examples can be found in the Subgraph OS
        <emphasis role="strong">Paxrat</emphasis> configuration files:
      </para>
      <programlisting>
/etc/paxrat/paxrat.conf
</programlisting>
    </sect3>
    <sect3 id="applying-pax-flags">
      <title>Applying PaX flags</title>
      <para>
        <emphasis>PaX flags</emphasis> must be re-applied after any
        configuration changes. Run the following command to re-apply
        <emphasis>PaX flags</emphasis>:
      </para>
      <programlisting>
$ sudo paxrat
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="anonymizing-mac-addresses-with-macouflage">
    <title>Anonymizing MAC addresses with Macouflage</title>
    <para>
      MAC addresses are the unique identifiers for the network interface
      on the computer (such as Ethernet ports and WIFI cards). Due to
      their unique nature, they can also compromise the privacy of the
      user.
    </para>
    <para>
      When connecting to a network, it is possible for other devices on
      the network to see the MAC address of the network interface that
      is connected. While this is not much of a concern on networks you
      trust such as your home network, it may compromise your privacy on
      those who do not trust. On untrustworthy or hostile networks,
      uniquely identifying characteristics such as the MAC address may
      allow others to track your computer.
    </para>
    <para>
      Subgraph OS mitigates this privacy risk by always creating random
      MAC addresses for all of your network interfaces. Each time one of
      your interfaces connects to a network, it will use a different MAC
      address. This helps to anonymize you across different networks or
      when connecting to the same network over and over again.
    </para>
  </sect2>
  <sect2 id="preventing-unauthorized-usb-access-with-usb-lockout">
    <title>Preventing unauthorized USB access with USB Lockout</title>
    <para>
      <emphasis role="strong">USB Lockout</emphasis> is a background
      feature in Subgraph OS. It protects your computer from
      unauthorized USB access while your desktop session is locked or
      you have logged out.
    </para>
    <para>
      <emphasis role="strong">USB Lockout</emphasis> is intended for
      situations where your computer must be left unattended for short
      periods. Particularly, in situations where you do not fear your
      computer will be stolen but you do do not want to expose it to
      other risks while unattended.
    </para>
    <para>
      Normally, when you lock the screen or logout, people may still
      insert a malicious USB device into the computer. While the
      computer is running, a malicious device can easily compromise it.
      <emphasis role="strong">USB Lockout</emphasis> denies all access
      for new USB devices while the screen is locked or the user is
      logged out.
    </para>
    <para>
      <emphasis role="strong">USB Lockout</emphasis> works by monitoring
      the state of the desktop session. When the session is locked or
      logged out, <emphasis role="strong">USB Lockout</emphasis> enables
      the Grsecurity <emphasis>Deny New USB</emphasis> setting. When the
      user unlocks the screen or logs back in, this setting is disabled,
      allowing access to new USB devices once again.
    </para>
    <para>
      See the following page page for more information about the
      Grsecurity <emphasis>Deny New USB</emphasis> feature:
    </para>
    <para>
      <ulink url="https://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options#Deny_new_USB_connections_after_toggle">https://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options#Deny_new_USB_connections_after_toggle</ulink>
    </para>
    <sect3 id="enablingdisabling-usb-lockout">
      <title>Enabling/disabling USB Lockout</title>
      <para>
        While <emphasis role="strong">USB Lockout</emphasis> runs
        automatically in the background, you can manually
        <emphasis>enable</emphasis> or <emphasis>disable</emphasis> it.
      </para>
      <para>
        Run the following command to <emphasis>enable</emphasis>
        <emphasis role="strong">USB Lockout</emphasis>:
      </para>
      <programlisting language="bash">
$ usblockout --enable
</programlisting>
      <para>
        Run the following command to <emphasis>disable</emphasis>
        <emphasis role="strong">USB Lockout</emphasis>:
      </para>
      <programlisting language="bash">
$ usblockout --disable
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="using-virtual-machines-in-subgraph-os">
    <title>Using virtual machines in Subgraph OS</title>
    <para>
      Contrary to popular belief, there is nothing that stops the use of
      virtual machines in Subgraph OS. While the
      <emphasis>Grsecurity</emphasis> kernel is not compatible with
      VirtualBox, <emphasis role="strong">Qemu/KVM</emphasis> works as
      expected. However, you must install
      <emphasis role="strong">Qemu/KVM</emphasis> yourself if you want
      to run virtual machines.
    </para>
    <para>
      Running the following command with install
      <emphasis role="strong">Qemu/KVM</emphasis>:
    </para>
    <programlisting language="bash">
$ sudo apt install qemu-system qemu-kvm qemu-utils
</programlisting>
    <sect3 id="creating-a-virtual-machine-with-qemu">
      <title>Creating a virtual machine with Qemu</title>
      <para>
        The following sections are recipes on how to use
        <emphasis role="strong">Qemu/KVM</emphasis> in Subgraph OS. They
        are similar to our own workflows for developing and testing
        Subgraph OS. <emphasis role="strong">Qemu/KVM</emphasis>
        supports many more options than what we use in these tutorials.
        For more detailed information regarding the operation of
        <emphasis role="strong">Qemu/KVM</emphasis> virtual machines,
        see the official <emphasis role="strong">Qemu</emphasis> manual:
      </para>
      <para>
        <ulink url="http://wiki.qemu.org/Manual">http://wiki.qemu.org/Manual</ulink>
      </para>
      <para>
        There are multiple third-party graphical user interfaces for
        <emphasis role="strong">Qemu/KVM</emphasis>. These may make it
        easier to configure and manage virtual machines. You can explore
        the various options by visiting these pages:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <ulink url="https://wiki.gnome.org/Apps/Boxes">https://wiki.gnome.org/Apps/Boxes</ulink>
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="http://virt-manager.et.redhat.com">http://virt-manager.et.redhat.com</ulink>
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="http://qemuctl.sourceforge.net">http://qemuctl.sourceforge.net</ulink>
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="https://launchpad.net/virtualbrick">https://launchpad.net/virtualbrick</ulink>
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
    <sect3 id="creating-a-basic-linux-virtual-machine">
      <title>Creating a basic Linux virtual machine</title>
      <para>
        Prior to creating the virtual machine, you should create a
        virtual hard-drive image for it:
      </para>
      <programlisting language="bash">
$ qemu-img create -f qcow2 disk.qcow2 8G
</programlisting>
      <para>
        Your virtual hard-drive is now ready for use. Run the following
        command to test a virtual machine with the hard-drive:
      </para>
      <programlisting language="bash">
$ qemu-system-x86_64 -enable-kvm -hda ./disk.qcow2 -m 4096
</programlisting>
      <para>
        To start a virtual machine with an operating system ISO attached
        to the virtual CDROM, run the following command:
      </para>
      <programlisting language="bash">
$ qemu-system-x86_64 -enable-kvm -hda ./disk.qcow2 -m 4096 \
-cdrom ./subgraph-os-alpha_2016-06-16_2.iso -boot d
</programlisting>
      <blockquote>
        <para>
          <emphasis role="strong">Qemu/KVM options</emphasis>
        </para>
        <para>
          <emphasis>-enable-kvm</emphasis>: enables
          <emphasis role="strong">KVM</emphasis> virtualisation, which
          is faster than <emphasis role="strong">Qemu's</emphasis>
          emulation
        </para>
        <para>
          <emphasis>-hda</emphasis>: This attaches the virtual
          hard-drive you created
        </para>
        <para>
          <emphasis>-m</emphasis>: This allocates RAM to the virtual
          machine (4096MB in the example)
        </para>
        <para>
          <emphasis>-cdrom</emphasis>: The path to the operation system
          ISO
        </para>
        <para>
          <emphasis>-boot</emphasis>: This specifies the boot order for
          the virtual machine, <emphasis>d</emphasis> is the virtual
          CDROM
        </para>
      </blockquote>
      <para>
        This example can be adapted to run the Linux distribution of
        your choice inside of a virtual machine.
      </para>
    </sect3>
    <sect3 id="creating-an-advanced-debian-stretch-virtual-machine-using-debootstrap">
      <title>Creating an advanced Debian Stretch virtual machine using
      debootstrap</title>
      <para>
        To have more control over the installation of Debian inside of a
        virtual machine, you can use
        <emphasis role="strong">debootstrap</emphasis> to install the
        operating system. Another advantage of this approach is that you
        can avoid all of the installation dialogs of the
        <emphasis role="strong">Debian installer</emphasis>.
      </para>
      <para>
        This section will show how to install Debian Stretch with the
        <emphasis>Grsecurity</emphasis> kernel from Subgraph OS.
      </para>
      <sect4 id="create-a-virtual-hard-drive-image-for-the-operating-system">
        <title>Create a virtual hard-drive image for the operating
        system</title>
        <para>
          To begin the install, you must set up a virtual hard-drive
          image. Follow these steps to set it up:
        </para>
        <orderedlist numeration="arabic">
          <listitem>
            <para>
              Run the following command to create a sparse virtual
              hard-drive image:
            </para>
            <programlisting language="bash">
$ truncate --size 8G ./disk.img
</programlisting>
          </listitem>
          <listitem>
            <para>
              To format the virtual hard-drive run the following
              command:
            </para>
            <programlisting language="bash">
$ /sbin/mkfs.ext4 ./disk.img
</programlisting>
            <para>
              After formatting the hard-drive, you can create a proper
              partition table. We will skip this step in the tutorial as
              it is not strictly necessary to run the virtual machine.
            </para>
          </listitem>
          <listitem>
            <para>
              Mount the virtual hard-drive:
            </para>
            <programlisting language="bash">
$ sudo mount -o loop ./disk.img /mnt
</programlisting>
          </listitem>
        </orderedlist>
        <para>
          <emphasis role="strong">NOTE:</emphasis> You should ensure
          there is enough free space in the image you create. You may
          want to allocate twice as much if you want to convert the
          image later on.
        </para>
        <para>
          The sparse virtual hard-drive image you created will only use
          as much space as it requires.
        </para>
        <para>
          Run the following command to show how much space is used by
          the image:
        </para>
        <programlisting language="bash">
$ du -sh disk.img
</programlisting>
        <para>
          The amount shown is a fraction of the total amount specified
          in the <emphasis>truncate</emphasis> command:
        </para>
        <programlisting>
189M    disk.img
</programlisting>
        <para>
          To verify the total amount that was specified in the
          <emphasis>truncate</emphasis> command, run this command:
        </para>
        <programlisting language="bash">
$ du --apparent-size -sh disk.img
</programlisting>
<literallayout>The total amount should correspond with what was specified when you ran
<emphasis>truncate</emphasis>:</literallayout>
        <programlisting>
8.0G    disk.img
</programlisting>
      </sect4>
      <sect4 id="installing-the-operating-system-with-deboostrap">
        <title>Installing the operating system with deboostrap</title>
        <para>
          Now that the virtual disk-image is created, we can now use
          <emphasis role="strong">debootstrap</emphasis> to install
          Debian Stretch. Follow these steps to install it:
        </para>
        <orderedlist numeration="arabic">
          <listitem>
            <para>
              Run <emphasis role="strong">debootstrap</emphasis> to
              install the operating system:
            </para>
            <programlisting language="bash">
$ sudo debootstrap --variant=mintbase --include=systemd-sysv stretch /mnt
</programlisting>
          </listitem>
          <listitem>
            <para>
              Set a <emphasis>root</emphasis> password for the installed
              operating system:
            </para>
            <programlisting language="bash">
$ sudo chroot /mnt passwd
</programlisting>
          </listitem>
          <listitem>
            <para>
              Create a standard fstab configuration:
            </para>
            <programlisting language="bash">
$ sudo tee /mnt/etc/fstab &lt;&lt; EOL
/dev/sda    /   ext4    defaults,errors=remount-ro  0   1
EOL
</programlisting>
          </listitem>
        </orderedlist>
      </sect4>
      <sect4 id="installing-the-grsecurity-kernel-in-the-operating-system">
        <title>Installing the Grsecurity kernel in the operating
        system</title>
        <para>
          Run the following commands to install the Subgraph OS
          <emphasis>Grsecurity</emphasis> kernel in your virtual
          machine:
        </para>
        <programlisting language="bash">
$ cd /tmp
$ apt-get download linux-{image,headers}-grsec-amd64-subgraph linux-{image,headers}-$(uname -r)
$ sudo cp ./linux-{image,headers}-$(uname -r) /mnt/tmp
$ sudo chroot /mnt
$ dpkg -i /tmp/linux-{image,headers}-*
$ update-initramfs -u -k all
$ exit
</programlisting>
        <para>
          The kernel and initramfs are inside of your mounted virtual
          hard-drive image. You must copy them to a directory on your
          computer to boot the virtual machine using these files. Run
          the following command to copy the files to the directory you
          want to start the virtual machine from:
        </para>
        <programlisting language="bash">
$ cp /mnt/boot/vmlinuz-&lt;version&gt;-amd64 /mnt/boot/initrd.img-&lt;version&gt;-amd64 \
/home/user/path/to/vm
</programlisting>
      </sect4>
      <sect4 id="finalizing-the-installation-of-the-operating-system">
        <title>Finalizing the installation of the operating
        system</title>
        <para>
          As the final step, we will sync the filesystem and unmount the
          virtual hard-drive image:
        </para>
        <programlisting language="bash">
$ sync
$ sudo umount /mnt
</programlisting>
        <para>
          (Optional) If you prefer, you may convert the virtual
          hard-drive image to the <emphasis>qcow2</emphasis> format:
        </para>
        <programlisting language="bash">
$ qemu-img convert -f raw -O qcow2 ./disk.img ./disk.qcow2
</programlisting>
      </sect4>
      <sect4 id="starting-the-debian-stretch-virtual-machine">
        <title>Starting the Debian Stretch virtual machine</title>
        <para>
          Now you are ready to start the virtual machine. Run the
          following command to start it:
        </para>
        <programlisting language="bash">
$ qemu-system-x86_64 -enable-kvm -hda ./disk.qcow2 \
    -kernel ./vmlinuz-&lt;version&gt;-amd64 \
    -initrd ./initrd.img-&lt;version&gt;-amd64 \
    -append root=/dev/sda
</programlisting>
        <para>
          <emphasis role="strong">NOTE:</emphasis> This assumes you
          converted the virtual hard-drive image to the
          <emphasis>qcow2</emphasis>. If not, replace
          <emphasis role="strong">disk.qcow2</emphasis> with the correct
          name of your image.
        </para>
        <blockquote>
          <para>
            <emphasis role="strong">Qemu/KVM options</emphasis>
          </para>
          <para>
            This section uses some new options for
            <emphasis role="strong">Qemu/KVM</emphasis>.
          </para>
          <para>
            <emphasis>-kernel</emphasis>: This is the operating system
            kernel to boot when starting a virtual machine
          </para>
          <para>
            <emphasis>-initrd</emphasis>: This is the initramfs to boot
            when starting a virtual machine
          </para>
          <para>
            <emphasis>-append</emphasis>: These are options to append to
            the kernel command line when starting a virtual machine
          </para>
        </blockquote>
        <para>
          If you want to install grub to keep the kernel and initrd
          images inside the virtual machine you'll have to create a full
          partition table. You may also need to create a separate
          <emphasis role="strong">/boot</emphasis> partition. But this
          is out of scope for this tutorial.
        </para>
      </sect4>
    </sect3>
    <sect3 id="setting-up-simple-networking-in-qemukvm">
      <title>Setting up simple networking in Qemu/KVM</title>
      <para>
        By default, <emphasis role="strong">Qemu</emphasis> will
        transparently <emphasis>NAT</emphasis> your virtual machines to
        the host network. This can be disabled by using the
        <emphasis role="strong">-net none</emphasis> flag.
      </para>
      <para>
        Alternatively, you can also open simple tunnels between the host
        and the virtual machine using the port redirection mechanism
        with the <emphasis role="strong">-redir</emphasis> flag:
      </para>
      <programlisting>
-redir tcp:55700::55700
</programlisting>
      <para>
        For more on networking in
        <emphasis role="strong">Qemu/KVM</emphasis> see:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <ulink url="http://wiki.qemu.org/Documentation/Networking">http://wiki.qemu.org/Documentation/Networking</ulink>
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="https://en.wikibooks.org/wiki/QEMU/Networking">https://en.wikibooks.org/wiki/QEMU/Networking</ulink>
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
  </sect2>
</sect1>
</article>
